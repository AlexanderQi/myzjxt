//created on: 2016-6-24
package rules;

import com.softcore.cim.entity.Equipment;
import com.drools.zjxt.kernellib.zjxt_CimBuild;
import com.drools.zjxt.kernellib.zjxt_ConnectionPool;
import com.drools.zjxt.kernellib.zjxt_Measure;
import com.drools.zjxt.kernellib.zjxt_Property;
import com.drools.zjxt.kernellib.Limit;
import com.drools.zjxt.kernellib.Limit.LimitValue;
import com.drools.zjxt.kernellib.zjxt_CimBuild.*;
import com.drools.zjxt.kernellib.zjxt_CimBuild.zCapacitor;
import com.drools.zjxt.kernellib.zjxt_CimBuild.zFeederLine;
import com.drools.zjxt.kernellib.zjxt_CimBuild.zSVG;
import com.drools.zjxt.kernellib.zjxt_CimBuild.zVoltageRegulator;
import com.drools.zjxt.kernellib.zjxt_CimBuild.zTransformerFormer;
import com.softcore.cim.common.CommonListCode;
import java.lang.Exception;
import zjxt.zjxt_CommandContent;
import zjxt.zjxt_State;
import zjxt2_app.zApf;
import zjxt2_app.zTpunbalance;
import com.drools.zjxt.kernellib.zjxt_Measure.*;
import zjxt.zjxt_msg;
import zjxt2_app.*;
import zjxt.zjxt_topo.zNode;
import zjxt.zjxt_YTKind;
import zjxt2_app.zjxt_build.FeederLine;
import com.softcore.cim.entity.PowerSystemResource;
import java.util.List;
import java.util.ArrayList;
import java.lang.Math;
import com.softcore.cim.entity.container.VoltageLevel;


rule "feederLine"

    when
       feederLine : zFeederLine()
    then
    	zjxt_msg.show("***************************馈线【{}】Start**************************", feederLine.getName());
    	String feederName = feederLine.getName();
    	if(!feederLine.isCanControl()) {
    		zjxt_msg.show("馈线【{}】当前有设备正在动作中...", feederName);
    		return;
    	}
    	String cs = feederLine.property.CanControl(); 
    	zjxt_msg.show("【{}】状态为 {}.",feederName,cs);
    	if(cs.equals(zjxt_State.cs_bucanyu)) {
    		zjxt_msg.show(feederName+"退出计算.");  
    		return;
    	}
    	
    	
    	List equipments = feederLine.equipments;
		zjxt_msg.show("【{}】节点数:{}", feederLine.getName(), equipments.size());
        float volRate; //电压合格率
        int volMeaErrSize = 0; //量测错误的设备数量
        int qualifiedSize = 0; //合格数量
        int overUp = 0; //越上限数量
        int overLo = 0;  //越下限数量
        int size = equipments.size();
        
        for(int i=0; i<size; i++) {
        	Equipment equi = (Equipment)equipments.get(i);
        	String equiName = equi.getName();
        	//zjxt_msg.show("节点名称:【{}】", equiName);
        	String eid = equi.getMrID();
	    	//zFeederLine line = null;
	    	zjxt_Property propPer = equi.prop;
	    	int vlid = equi.vlid; //电压铭牌数据
	    	//VoltageLevel voltage = equi.voltage;
	    	//zjxt_msg.show("{} 电压等级:{}", equiName, vlid);
	    	boolean bool = false;
	    	if(!equi.controlState.equals(zjxt_State.cs_bucanyu)) {
	    		bool = zjxt_CimBuild.filterMeasure(equi);//2017-8-1 返回电压是否合法 不检查Q,I,PF关联性。
	    		if(equi.hasDeadData) {
	    			zjxt_msg.show("节点【{}】含有死数据!", equiName);
	    		}
		    	if(equi.hasDeadData || bool) {
		    		volMeaErrSize++;
		    	}
	    	} else {
	    		volMeaErrSize++;
	    	}
	    	
        	LimitValue lv = Limit.getLimitInPeriod(eid, "电压"); //取限值对象
			if(lv == null) {
				equi.prop.SetAlarm(equiName+"没有当前时段电压限值!");
				return;
			}
			equi.limit = lv;
			float u = equi.U;
			zjxt_msg.show("节点【{}】当前电压：{}V, 本时段上限:{}V,下限:{}V,上上限:{}V,下下限:{}V YCID:{} ActNum:{}",
			 equiName,u,lv.up,lv.lo,lv.upup,lv.lolo,equi.UYCID,equi.ActNumber);
			if(!equi.hasDeadData && !bool&& !equi.controlState.equals(zjxt_State.cs_bucanyu)) {
				if(u<=lv.upup && u>=lv.lolo) { //电压
					qualifiedSize++;
				}
				if(u > lv.upup)
					overUp++;
				if(u < lv.lolo)
					overLo++;
			}
        }//for
        
        if(size == volMeaErrSize) {
        	volRate = 0f;
        } else {
        	volRate = (float) qualifiedSize/(size-volMeaErrSize);	
        }
        zjxt_msg.show("馈线【{}】当前电压合格率:{}%", feederName,String.format("%.2f", volRate * 100));
        zjxt_msg.show("馈线【{}】越电压上限数量:{} 越下限数量:{}", feederName,overUp, overLo);
        if(volRate >= 0.99){
        	zjxt_msg.show("本馈线综合电压合格率正常，将逐步调节设备为功率因数优先模式.");
        	return;
        }else{
        	size = equipments.size();
        	for(int i=0; i<size; i++) {
        		Equipment eq = (Equipment)equipments.get(i);
        		String Name = eq.getName();
        		if(eq.prop.IsLocked()){
        			zjxt_msg.show("【{}】本次略过,存在闭锁信息:{}",Name,eq.prop.LockedInfo);
        		 	continue;
        		 }
        		//String eid = eq.getMrID();			
				checkU(eq,volRate,overUp,overLo);
	    	}
    	}
    	
    	/*
    	zjxt_msg.show("电压均正常，计算无功设备功率因数合格率，开始无功优化...");
    	//计算无功设备功率因数合格率
    	for(int i=0; i<size; i++) {
    		Equipment equi = (Equipment)equipments.get(i);
    		if(CommonListCode.REACTIVE_POWER_KIND.equals(equi.kind)) { //无功设备
    			LimitValue lv = Limit.getLimitInPeriod(equi.getMrID(), "功率因数"); //取功率因数限值对象
    			if(!equi.hasDeadData && !equi.isMeasureError) {
    				if(lv.lolo<=equi.PF && equi.PF<=lv.upup) { //功率因数合格
						continue;
					} else {
						//List<zNode> timinalList = zNode.getTiminalNodes();
			        	for(zNode node : timinalList) {
			        		dealReactive(node);
			        	}
					}
    			} else {
    				continue;
    			}
				
    		}
    	}*/
    	/*
    	zjxt_msg.show("无功优化完毕，开始电压优化...");
    	//功率因数合格率为100%,进行电压优化
    	for(int i=0; i<size; i++) {
    		Equipment equi = (Equipment)equipments.get(i);
    		if(equi instanceof zTransformerFormer) {
    			LimitValue lv = Limit.getLimitInPeriod(equi.getMrID(), "电压"); //取限值对象
    			equi.volOptimizeLo = lv.lo;
    			equi.volOptimizeUp = lv.up;
    			//equi.loadFactor = Math.sqrt(Math.pow(equi.P,2)+Math.pow(equi.Q,2))/400;
    			if(!equi.hasDeadData && !equi.isMeasureError) {
    				volOptimize(equi);
    			}
    			
    		} else if(equi instanceof zVoltageRegulator) {
    			LimitValue lv = Limit.getLimitInPeriod(equi.getMrID(), "电压"); //取限值对象
    			equi.volOptimizeLo = lv.lo;
    			equi.volOptimizeUp = lv.up;
    			//equi.loadFactor = equi.U*equi.I/1000/2000;
    			if(!equi.hasDeadData && !equi.isMeasureError) {
    				volOptimize(equi);
    			}
    			
    		}
    	}
    	*/
    	zjxt_msg.show("***************************馈线【{}】End**************************", feederLine.getName());
end

//预算算设备组综合电压合格率 
function float getPassRate(List equipments,float VolChangeRate, boolean showlog){
	int size = equipments.size();
    int volMeaErrSize = 0;
    int qualifiedSize = 0;
    for(int i=0; i<size; i++) {
    	Equipment equi = (Equipment)equipments.get(i);
    	String name = equi.getName();
    	//zjxt_msg.show("节点名称:【{}】", equiName);
    	String id = equi.getMrID();
    	//zFeederLine line = null;
    	//zjxt_Property propPer = equi.prop;
    	//int vlid = equi.vlid; //电压铭牌数据
    	//VoltageLevel voltage = equi.voltage;
    	//zjxt_msg.show("{} 电压等级:{}", equiName, vlid);  	
    	boolean IsNoRun = equi.controlState.equals(zjxt_State.cs_bucanyu);
    	boolean bool = false;
    	if(!IsNoRun) {
    		bool = zjxt_CimBuild.filterMeasure(equi);
    		
	    	if(equi.hasDeadData || bool) {
	    		if(showlog)
	    			zjxt_msg.show("【{}】量测异常或有死数据",name);
	    		volMeaErrSize++;
	    	}
    	} else {
    		volMeaErrSize++;
    	}
    	
    	LimitValue lv = Limit.getLimitInPeriod(id, "电压"); //取限值对象
		if(lv == null) {
			if(showlog)
				zjxt_msg.show("【{}】没有当前时段电压限值!",name);
			volMeaErrSize++;
			continue;
		}
		equi.limit = lv;
		float u = equi.U * VolChangeRate;
		if(showlog)
			zjxt_msg.show("节点【{}】预算电压：{}V, 本时段上限:{}V,下限:{}V,上上限:{}V,下下限:{}V ", name,u,lv.up,lv.lo,lv.upup,lv.lolo);
		if(!equi.hasDeadData && !bool&& !IsNoRun) {
			if(u<=lv.upup && u>=lv.lolo) { //电压
				qualifiedSize++;
			}
		}
    }//for
    
    float volRate = 0f;
    if(size == volMeaErrSize) {
    	volRate = 0f;
    } else {
    	volRate = (float) qualifiedSize/(size-volMeaErrSize);	
    }
	return volRate;
}


//电压越上限
function boolean handleLimitUp(Equipment eq) {
	if(!canOfforDown(eq)) {
		eq.prop.SetAlarm(eq.getName()+"当前电压为:"+eq.U+"V,无调节手段!");
		return false;
	} else { //当前节点可控
				float Umax = eq.limit.upup-eq.U; 
				double minU = eq.limit.lolo-eq.U;
				double ΔU = eq.volChange;//caculateUm(eq, true); 
				if(eq instanceof zCapacitor) {
				
					zCapacitor comp = (zCapacitor) eq;
					//double targetPF = getTargetPF(eq, eq.Qm);
					zjxt_CommandContent commandContent = new zjxt_CommandContent(eq.controlState);
					commandContent.setAction("调节【{}】工作模式为电压优先模式", eq.getName());
					commandContent.setReason("当前电压:{}V,无功功率为:{},功率因数为:{},判断为电压越上限", eq.U, eq.Q, eq.PF);
					commandContent.setExpect("电压为:{}", round(eq.U-ΔU));
					sendYT(eq, eq.controlParam.volCtrlModytval, commandContent.toString(), zjxt_YTKind.WORK_MODE);
					return true;
				}else if(eq instanceof zTransformerFormer) {			
					zjxt_CommandContent commandContent = new zjxt_CommandContent(eq.controlState);
					commandContent.setAction("【{}】降档操作", eq.getName());
					commandContent.setReason("当前电压平均值:{} UA:{} UB:{} UC:{},档位:{}档,判断为电压越上限",eq.Uavg,eq.UA,eq.UB,eq.UC,eq.currentStep);
					commandContent.setExpect("档位为:{}档", eq.currentStep-1);
					sendYK(eq, 0, commandContent.toString());
					return true;
				}else if(eq instanceof zVoltageRegulator) {
				
					zjxt_CommandContent commandContent = new zjxt_CommandContent(eq.controlState);
					commandContent.setAction("【{}】降档操作", eq.getName());
					commandContent.setReason("当前电压值:{} 档位:{}档,判断为电压越上限",eq.Uavg,eq.currentStep);
					commandContent.setExpect("档位为:{}档", eq.currentStep-1);
					sendYK(eq, 0, commandContent.toString());
					return true;
				}
				return true;
	}  
}

/**
* 电压越下限
*/
function boolean handleLimitLo(Equipment eq) {   
		String Name = eq.getName();
		if(!canOnorUp(eq)) {
			eq.prop.SetAlarm("【{}】当前不符合控制条件，存在闭锁或保护。",Name);
			return false;
		} else {
			if(eq instanceof zCapacitor) { 
			    if(eq.controlmode == 2){ //控制模式为遥控  (1 遥调 2遥控)
			    	//zjxt_msg.show("{} 10000V rule",Name);
			    	zCapacitor cap = (zCapacitor)eq;
			    	zCapacitor capitem = cap.getActItem(0);//查找状态是切除（未投入）的一个电容子组
			    	if(capitem != null){		    		
			     		float Umax = cap.limit.upup-cap.U; 
						double ΔU = capitem.volChange;
						zjxt_msg.show("Umax {} ΔU {}",Umax,ΔU);
			    		if(ΔU != 0 && ΔU<=Umax) {						
							zjxt_CommandContent commandContent = new zjxt_CommandContent(eq.controlState);
							commandContent.setAction("调控【{}】投入一组电容", capitem.getName());
							commandContent.setReason("当前电压:{}V,无功功率为:{},判断为电压越下限,可投入一组电容", eq.U, eq.Q);
							commandContent.setExpect("电压为:{}", round(cap.U+ΔU));
							//zjxt_msg.show("before sendYK");
							String cmdinfo = commandContent.toString();
							zjxt_msg.show(cmdinfo);
							//capitem.prop.setyk(1,zjxt_msg.KongZhi,"投入",cmdinfo,cmdinfo);
							sendYK(capitem, 1, commandContent.toString());
							
							return true;
						}
			    	}else{
			    		cap.prop.SetAlarm("【{}】当前没有可以投入的电容子组",Name);
			    	}
			    }else{
					float Umax = eq.limit.upup-eq.U; 
					double ΔU = eq.volChange;
					if(ΔU != 0 && ΔU<=Umax) {
						//double targetPF = getTargetPF(eq, eq.Qm);
						zjxt_CommandContent commandContent = new zjxt_CommandContent(eq.controlState);
						commandContent.setAction("调节【{}】工作模式为电压优先模式,设备将投入一组电容", Name);
						commandContent.setReason("当前电压:{}V,无功功率为:{},功率因数为:{},判断为电压越下限,可投入一组电容", eq.U, eq.Q, eq.PF);
						commandContent.setExpect("电压为:{}", round(eq.U+ΔU));
						sendYT(eq, eq.controlParam.volCtrlModytval, commandContent.toString(), zjxt_YTKind.WORK_MODE);
						return true;
					}
				}
				eq.prop.SetAlarm("【{}】当前电压:{},电压越下限,无调节手段!",Name,eq.U);
				return false;
			} else if(eq instanceof zTransformerFormer) { //调压器
				zjxt_CommandContent commandContent = new zjxt_CommandContent(eq.controlState);
				commandContent.setAction("【{}】升档操作", Name);
				commandContent.setReason("当前电压平均值:{} UA:{} UB:{} UC:{},档位:{}档,判断为电压越下限",eq.Uavg,eq.UA,eq.UB,eq.UC,eq.currentStep);
				commandContent.setExpect("档位为:{}档", eq.currentStep+1);
				sendYK(eq, 1, commandContent.toString());
				return true;
			}else if(eq instanceof zVoltageRegulator) { //调压器
				zjxt_CommandContent commandContent = new zjxt_CommandContent(eq.controlState);
				commandContent.setAction("【{}】升档操作", Name);
				commandContent.setReason("当前电压值:{} 档位:{}档,判断为电压越下限",eq.Uavg,eq.currentStep);
				commandContent.setExpect("档位为:{}档", eq.currentStep+1);
				sendYK(eq, 1, commandContent.toString());
				return true;
			}  
			
		return true;
	}
}


/**
* 发送遥控
**/
function void sendYK(Equipment e, double value, String info) {
	String head = "";
	String kind = "";	
	if(e instanceof zTransformerFormer || 
		e instanceof zVoltageRegulator) {
			//if(e.controlState.equals(zjxt_State.cs_JanYi)) { //建议
			//	head = "建议;";
			//	kind = zjxt_msg.JianYi;  //'建议'的拼音
			//} else if(e.controlState.equals(zjxt_State.cs_Kongzhi)) { //控制
			//	head = "控制;";
			//	kind = zjxt_msg.KongZhi;  //zjxt_msg.KongZhi 静态字符串资源，是'控制'的拼音
			//}
		String action = "";
		int step = e.currentStep;
		if(value == 1) {
			action = "升档";
			step = step+1;
		} else if(value == 0) {
			action = "降档";
			step = step-1;
		}
		String ykname = e.getName()+"-档位";
		//zjxt_msg.show(ykname);
		e.prop.setykByName((int)value, ykname, kind, action, info, info);
		//zjxt_msg.show("*【{}】已下发命令", ykname);	
		e.prop.SetTarget((float)e.currentStep, (float)step);
	}else{
		String action = "";
		int cur_onoff = 0; //当前开关状态
		if(value == 1) {
			action = "投入";
			cur_onoff = 0;
		} else if(value == 0) {
			action = "切除";
			cur_onoff = 1;
		}
		String ykname = e.getName()+"-开关遥控";
		e.prop.setykByName((int)value, ykname, kind, action, info, info);	
		e.prop.SetTarget((float)cur_onoff,(float)value);
	}
}


/**
* 发送遥调
**/
function void sendYT(Equipment e, double value, String info, String ytkind) {
	String head = "";
	String kind = "";
	if(e.controlState.equals(zjxt_State.cs_JanYi)) { //建议
		head = "建议;";
		kind = zjxt_msg.JianYi;  //'建议'的拼音
	} else if(e.controlState.equals(zjxt_State.cs_Kongzhi)) { //控制
		head = "控制;";
		kind = zjxt_msg.KongZhi;  //zjxt_msg.KongZhi 静态字符串资源，是'控制'的拼音
	}
	//如果该设备是APF、SVG、三相不平衡、调压器，则发送遥调命令
	if(e instanceof zApf || 
		e instanceof zSVG || 
		e instanceof zTpunbalance ||
		e instanceof zCapacitor) {
		e.oldU = e.U;
		e.oldP = e.P; 
		e.oldPF = e.PF; //记录当前的电压，有功,功率因数，等动作成功后计算电抗
		//zjxt_msg.show(e.getName()+"当前目标功率因数"+e.TargetPF);
		//zjxt_msg.show(e.getName()+"发送目标功率因数"+value/1000);
		//zjxt_msg.show(""+(e.TargetPF-value/1000));
		//System.out.println(Math.abs(e.TargetPF - value/1000) > 0.01f);
		if(zjxt_YTKind.TARGET_PF.equals(ytkind)) { //目标功率因数遥调
			if(Math.abs(e.TargetPF - value/1000) > 0.001f) { 
				e.prop.setyt(ytkind, (float)value, kind, zjxt_msg.Cos_ + zjxt_msg.YaoTiao, info, head+info);
				e.prop.SetTarget(e.TargetPF, (float)value/1000);
			}
		}
		if(zjxt_YTKind.WORK_MODE.equals(ytkind)) { //工作模式遥调
			if(Math.abs(e.workMode-value) > 0.1f) {
				e.prop.setyt(ytkind, (float)value, kind, zjxt_YTKind.WORK_MODE + zjxt_msg.YaoTiao, info, head+info);
				e.prop.SetTarget(e.workMode, (float)value/1000);
			}else{
				zjxt_msg.show("【{}】工作模式已设置",e.getName());	
			}
		}
	}
}

/**
* 发送遥控遥调
**/
function void sendYKYT(Equipment e, double value, String info) {
	//String cs = e.prop.CanControl(); //控制状态
	String head = "";
	String kind = "";
	if(e.controlState.equals(zjxt_State.cs_JanYi)) { //建议
		head = "建议;";
		kind = zjxt_msg.JianYi;  //'建议'的拼音
	} else if(e.controlState.equals(zjxt_State.cs_Kongzhi)) { //控制
		head = "控制;";
		kind = zjxt_msg.KongZhi;  //zjxt_msg.KongZhi 静态字符串资源，是'控制'的拼音
	}
	//zjxt_msg.show(cs+"");
	//有载调压变，则发送遥控命令
	if(e instanceof zTransformerFormer || 
		e instanceof zVoltageRegulator) {
		String action = "";
		int step = e.currentStep;
		if(value == 1) {
			action = "升档";
			step = step+1;
		} else if(value == 0) {
			action = "降档";
			step = step-1;
		}
		e.prop.setykByName((int)value, "升降挡", kind, action, info, head+info);	
		e.prop.SetTarget((float)e.currentStep, (float)step);
	}
	//如果该设备是APF、SVG、三相不平衡、调压器，则发送遥调命令
	if(e instanceof zApf || 
		e instanceof zSVG || 
		e instanceof zTpunbalance ||
		e instanceof zCapacitor) {
		e.oldU = e.U;
		e.oldP = e.P; 
		e.oldPF = e.PF; //记录当前的电压，有功,功率因数，等动作成功后计算电抗
		//zjxt_msg.show(e.getName()+"当前目标功率因数"+e.TargetPF);
		//zjxt_msg.show(e.getName()+"发送目标功率因数"+value/1000);
		//zjxt_msg.show(""+(e.TargetPF-value/1000));
		//System.out.println(Math.abs(e.TargetPF - value/1000) > 0.01f);
		if(Math.abs(e.TargetPF - value/1000) > 0.01f) {
			e.prop.setyt("目标功率因数", (float)value, kind, zjxt_msg.Cos_ + zjxt_msg.YaoTiao, info, head+info);
			e.prop.SetTarget(e.TargetPF, (float)value/1000);
		}
		
	}
}

/**
 * 计算目标功率因数
 **/
function double getTargetPF(Equipment e, double ΔQc) {
	double P = (double) e.P;
	double Q = (double) e.Q;
	double PF = (double) e.PF;
	LimitValue lv = Limit.getLimitInPeriod(e.getMrID(), "功率因数"); //取功率因数限值对象
	boolean isUpVol = true; //是否升压
	if(e.limit.upup<e.U || (e.limit.lolo<=e.U&&e.U<=e.limit.upup&&e.PF>lv.upup) || e.PF<0) {
		ΔQc = ΔQc*(-1);
		isUpVol = false;
	}
	//double targetPF = Math.sqrt((Math.pow(P,2)+Math.pow(Q,2)) / (Math.pow(P,2)+Math.pow(Q-ΔQc,2)));
	double targetPF = P / Math.sqrt(Math.pow(P,2)+Math.pow(Q-ΔQc,2));
	if(e instanceof zCapacitor) {
		if((Q-ΔQc)<0) targetPF = -1 * targetPF; 
		//if(isUpVol) {
		//	if(targetPF + 0.01 > 1) {
		//		targetPF = 1;
		//	} else {
		//		targetPF = targetPF + 0.01;
		//	}
		//}
	}
	targetPF = (double) Double.parseDouble(String.format("%.2f", targetPF));
	
	return targetPF;
}

function boolean canAct(Equipment e){
	String cs = e.controlState;
	boolean isLocked = e.prop.IsLocked();
	boolean isProtected = e.prop.IsProtected();
	boolean isMeasureError = e.isMeasureError;
	String equiName = e.getName();
	zjxt_msg.show("【{}】控制状态:{}",equiName,cs);
	if(isMeasureError){
		zjxt_msg.show("【{}】量测异常",equiName);
		return false;
	}
	if(isLocked){
		zjxt_msg.show("【{}】{}", equiName,e.prop.LockedInfo);
		return false;
	}
	if(isProtected){
		zjxt_msg.show("【{}】{}", equiName,e.prop.ProtectInfo);
		return false;
	}	
	if(e.line.isCanControl()){
		return true;
	}else{
		zjxt_msg.show("【{}】所属馈线闭锁", equiName);
		return false;
	}
	
	//return true;
}

/**
 * 是否可切或者可降
 **/
function boolean canOfforDown(Equipment e) {
	boolean act = canAct(e);
	if(!act)return false;
	String equiName = e.getName();
	if(e instanceof zTransformerFormer || e instanceof zVoltageRegulator){
		int curStep = e.currentStep;
		int lowStep = e.lowStep;
		if(curStep <= lowStep){
			zjxt_msg.show("【{}】当前档位:{},最低档位:{};已不能降档。",equiName,curStep,lowStep);
			return false;
		}
	}	
	/*
	else if(e instanceof zCapacitor)
		zjxt_msg.show("【{}】当前工作模式:{}", equiName,e.workMode);
	*/
	return true;
	
}

/**
* 是否可投或者可升
**/
function boolean canOnorUp(Equipment e) {
	boolean act = canAct(e);
	if(!act)return false;
	String equiName = e.getName();
	if(e instanceof zTransformerFormer || e instanceof zVoltageRegulator){
		int curStep = e.currentStep;
		int highStep = e.highStep;
		if(curStep >= highStep){
			zjxt_msg.show("【{}】当前档位:{},最高档位:{};已不能升档。", equiName,curStep,highStep);
			return false;
		}
	}
	/*
	if(e instanceof zCapacitor)
		zjxt_msg.show("【{}】当前工作模式:{}", equiName,e.workMode);*/
	return true;
}

function String round(double value) {
	return String.format("%.2f", value);
}

function void checkU(Equipment e, float volRate,int overUp,int overLo) {
	PowerSystemResource parent = zjxt_CimBuild.GetById(e.parentId);
	/*
	if(parent != null){
		zjxt_msg.show("节点【{}】 上级节点:【{}】",eq.getName(),parent.getName());
	}else{
		zjxt_msg.show("节点【{}】 没有上级节点",eq.getName());
	}*/
	String sv = round(volRate * 100);	
	String ename = e.getName();
	
	if(e.Uavg > e.limit.upup) { //3相电压最小相越上限
		zjxt_msg.show("节点【{}】当前电压平均值越考核上限, U:{} UA:{} UB:{} UC:{}, 考核上限：{}V",ename,e.Uavg,e.UA,e.UB,e.UC,e.limit.upup);
		boolean ret =  handleLimitUp(e);  //本级处理
		if(!ret) //本级处理不了,找上级处理
		{
			if(parent == null) return; //没上级就没办法了
			if(parent instanceof zFeederLine) return; //上级是纯管理单位也没办法了
			if(!(parent instanceof zVoltageRegulator)) return; //上级不是线路调压器也没办法 
			String pname = parent.getName();	
			zjxt_msg.show("节点【{}】请求上级节点【{}】降压操作",ename,pname);
			if(volRate > 0.8){
				zjxt_msg.show("上级节点【{}】不会马上动作,当前馈线电压合格率{}%,当低于80% 时动作.",pname,sv);
			 	return;  //本馈线电压合格率大于80%,不会动上级.
			}
			if(overUp > overLo) //馈线上的设备越上限数量大于越下限数量,才可以要求上级处理越上限情况.
			{
				float uc = (float)parent.stepvoltageincrement; //取调压器变比
				uc = 1 - uc;  //降压变比.
				float r = getPassRate(parent.ChildNodes, uc, true);//预算上级设备动作后的馈线电压合格率.				
				if(r > volRate)
			 		handleLimitUp((Equipment)parent);  //找上级处理
			 	else{
			 		String r_str = round(r * 100);
			 		zjxt_msg.show("上级节点【{}】拒绝动作,经预算,调压后合格率{}%.低于当前合格率{}%",pname,r_str,sv);
				}
			}else
				zjxt_msg.show("上级节点【{}】拒绝动作,判断当前馈线越下限数量多于越上限数量,不能进行降压处理.",pname);
		} 
	} else if(e.Umin < e.limit.lolo) { //3相电压最小相电压越下限
		zjxt_msg.show("节点【{}】当前{}相电压越考核下限, UA:{} UB:{} UC:{}, 考核下限：{}V",ename,e.UminName,e.UA,e.UB,e.UC, e.limit.lolo);
		boolean ret = handleLimitLo(e);
		if(!ret) 
		{
			if(parent == null) return;
			if(parent instanceof zFeederLine) return; 
			if(!(parent instanceof zVoltageRegulator)) return; //上级不是线路调压器也没办法 
			String pname = parent.getName();	
			zjxt_msg.show("节点【{}】请求上级节点【{}】升压操作",ename,pname);
			if(volRate > 0.8){
				zjxt_msg.show("上级节点【{}】不会马上动作,当前馈线电压合格率{}%,当低于80% 时动作.",pname,sv);
			 	return;  //本馈线电压合格率大于80%,不会动上级.
			}
			if(overLo >= overUp){
				float uc = (float)parent.stepvoltageincrement; //取调压器变比
				uc = 1 + uc;  //升压变比.
				float r = getPassRate(parent.ChildNodes, uc, true);//预算上级设备动作后的馈线电压合格率.
				if(r > volRate)
			 		handleLimitLo((Equipment)parent);  //找上级处理
			 	else{
			 		String r_str = round(r * 100);
			 		zjxt_msg.show("上级节点【{}】拒绝动作,经预算,调压后合格率{}%.低于当前合格率{}%",pname,r_str,sv);
				}
			}
			else
			  zjxt_msg.show("上级节点【{}】拒绝动作,判断当前馈线越上限数量多于越下限数量,不能进行升压处理.",pname);
		}
	}else if(e.Uavg < e.limit.up && e.U > e.limit.lo){//电压情况良好
		zjxt_msg.show("节点【{}】当前电压良好, U：{}V, 将设为功率因数优先模式。", ename, e.U);
		zjxt_CommandContent commandContent = new zjxt_CommandContent(e.controlState);
		commandContent.setAction("调节【{}】工作模式为功率因数优先模式", ename);
		commandContent.setReason("当前电压:{}V,无功功率为:{},功率因数为:{},电压良好,可以调节为功率因数优先模式", e.U, e.Q, e.PF);
		commandContent.setExpect("设备工作模式处于功率因数优先模式.");
		sendYT(e, e.controlParam.cosCtrlModytval, commandContent.toString(), zjxt_YTKind.WORK_MODE);				
	} 
}



/**
* 根据前后设备动作前后的量测变化计算电抗
**/
function caculateX(Equipment e) {
	if(e instanceof zCapacitor) {
		e.X = (float)(Math.abs(e.U-e.oldU)*10.5/(((zCapacitor) e).capacity/2));
	} else if(e instanceof zVoltageRegulator) {
		e.X = (float)(Math.abs(e.U-e.oldU)*10.5/(e.P*(Math.tan(Math.acos(e.oldPF))-Math.tan(Math.acos(e.PF)))));
	} else if(e instanceof zTransformerFormer) {
		e.X = (float)(Math.abs(e.U-e.oldU)/2200*10.5/(e.P*(Math.tan(Math.acos(e.oldPF))-Math.tan(Math.acos(e.PF)))));
	} else {
		e.X = (float)(Math.abs(e.U-e.oldU)*Math.sqrt(3)/e.vlid*10.5/(e.P*(Math.tan(Math.acos(e.oldPF))-Math.tan(Math.acos(e.PF)))));
	}
	zjxt_CimBuild.writeX(e.getMrID(), e.X); //更新电抗值
	zjxt_msg.show(e.getName() + "oldapf:" + e.oldPF);
	zjxt_msg.show(e.getName() + "oldU:" + e.oldU);
	zjxt_msg.show(e.getName() + "电抗：" + e.X);
}


//预算电压
function double caculateUC(Equipment e){
	double u_changed = 0;
	if(e instanceof zTransformerFormer ||
		e instanceof zVoltageRegulator) {
		double k = e.stepvoltageincrement;
		 u_changed = ((1 - 1/(1+k)) + (1/(1-k) - 1))*e.vlid*0.5;
	}
	return u_changed; 
}

/**
* 调压变、调压器每升一档的电压变化
**/
function String caculateU2(Equipment e, boolean isUp) {
	double U2 = 0;
	if(e instanceof zTransformerFormer ||
		e instanceof zVoltageRegulator) {
		double k = (float)e.stepvoltageincrement;
		double u_changed = ((1 - 1/(1+k)) + (1/(1-k) - 1))*e.vlid*0.5;
		if(isUp) {
			//U2 = e.U *((1+(e.currentStep-5)*e.stepvoltageincrement)+e.stepvoltageincrement)/(1+(e.currentStep-5)*e.stepvoltageincrement);			 
			U2 = e.U + u_changed;
		} else {
			//U2 = e.U *((1+(e.currentStep-5)*e.stepvoltageincrement)-e.stepvoltageincrement)/(1+(e.currentStep-5)*e.stepvoltageincrement);
			U2 = e.U - u_changed;
		}
	}
	return String.format("%.2f", U2);
}


//拼接apf、三相不平衡告警字符串
function String getAlarmStr(Equipment e) {
	String info = "";
	if(e instanceof zApf) {
		info = "当前总电压谐波含有率："+e.thdu+"%,总电流谐波含有率："+e.thdi+"%,暂无需治理谐波,";
	}
	if(e instanceof zTpunbalance) {
		info = "当前三相不平衡度："+e.sxbphd+"%,暂无需治理,";
	}
	return info;
}

//节能
function String getJN(double value) {
	String valStr = "";
	if(value<0) {
		valStr = "0";
	} else {
		valStr = String.format("%.2f", value);
	}
	return valStr;
}