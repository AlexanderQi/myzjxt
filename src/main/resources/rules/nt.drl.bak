//created on: 2016-6-24
package rules;

import com.softcore.cim.entity.Equipment;
import com.drools.zjxt.kernellib.zjxt_CimBuild;
import com.drools.zjxt.kernellib.zjxt_ConnectionPool;
import com.drools.zjxt.kernellib.zjxt_Measure;
import com.drools.zjxt.kernellib.zjxt_Property;
import com.drools.zjxt.kernellib.Limit;
import com.drools.zjxt.kernellib.Limit.LimitValue;
import com.drools.zjxt.kernellib.zjxt_CimBuild.*;
import com.drools.zjxt.kernellib.zjxt_CimBuild.zCompensator;
import com.drools.zjxt.kernellib.zjxt_CimBuild.zFeederLine;
import com.drools.zjxt.kernellib.zjxt_CimBuild.zSVG;
import com.drools.zjxt.kernellib.zjxt_CimBuild.zVoltageRegulator;
import com.drools.zjxt.kernellib.zjxt_CimBuild.zTransformerFormer;
import zjxt2_app.zApf;
import zjxt2_app.zTpunbalance;
import com.drools.zjxt.kernellib.zjxt_Measure.*;
import zjxt.zjxt_msg;
import zjxt2_app.*;
import zjxt.zjxt_topo.zNode;
import zjxt2_app.zjxt_build.FeederLine;
import com.softcore.cim.entity.PowerSystemResource;
import java.util.List;
import java.util.ArrayList;
import java.lang.Math;
import com.softcore.cim.entity.container.VoltageLevel;


//declare any global variables here

rule "rule"

	//
    when
       list : List()
    then
    	List equipments = new ArrayList();
    	//String name = e.getName();
    	//String id = e.getMrID();
    	//zFeederLine line = e.line;
    	//zjxt_Property prop = e.prop;
    	//String VLID = e.vlid; //电压等级ID
    	//zjxt_msg.show("电压等级:"+VLID);
    	//int cs = prop.CanControl(); //定义设备状态变量cs;  0:不参与计算; 1:建议 ; 2:控制;
    	//if(e instanceof zCompensator) {
    	//	int sonoff = prop.getyxById(((zCompensator)e).SWITCHID);  //任何设备类都有property属性，该属性提供访问四遥数据对象。此处通过电容开关ID号获得开关开合状态。
		//	int ch = prop.CheckTarget(30,sonoff);  //设定反馈检查间隔，当30秒后，检查这个电容开关开合状态是否发生变化。
    	
    	//	if(cs == 2) {        
		        //当且仅当设备状态为“控制”，才有反馈。 
		//		if(ch == 1) {
		//			zjxt_msg.show(name+" 上次命令执行成功");
		//			prop.AddSelfActNum(true);
		//		} else if(ch == 0) {
		//			zjxt_msg.show(name+" 上次命令执行失败.");
		//			prop.AddSelfActNum(false);
		//		} else if(ch == 2) {
		//			zjxt_msg.show("等待上次命令执行结果.");
		//		}
		//	}
    	//}
    	for(Object p: list) {
    		if(p instanceof Equipment) {
    			equipments.add(p);
    			Equipment e = (Equipment)p;
    			String name = e.getName();
    			int cs = e.prop.CanControl();
    			zjxt_msg.show("cs:"+cs);
    			if(p instanceof zCompensator) {
    				zCompensator cap = (zCompensator)p;
	    			int sonoff = cap.property.getyxById(cap.SWITCHID);
	    			zjxt_msg.show(cap.getName() + ":" + sonoff);
					int ch = cap.property.CheckTarget(30,sonoff);  //设定反馈检查间隔，当30秒后，检查这个电容开关开合状态是否发生变化。
					zjxt_msg.show(name + "ch:"+ch);
					if(cs==2){                    //当且仅当设备状态为“控制”，才有反馈。 
						if(ch == 1) {
							zjxt_msg.show(name+" 上次命令执行成功");
							caculateX((Equipment)p);
							cap.property.AddSelfActNum(true);
						} else if(ch == 0) {
							zjxt_msg.show(name+" 上次命令执行失败.");
							cap.property.AddSelfActNum(false);
						} else if(ch == 2) {
							zjxt_msg.show("等待上次命令执行结果.");
						}
					}
	    		}
	    		if(p instanceof zVoltageRegulator) {
	    			int tap = ((zVoltageRegulator)p).currentStep;
					//zjxt_msg.show(name + "tap:"+tap);
					int ch = ((zVoltageRegulator)p).property.CheckTarget(60,tap);
					zjxt_msg.show(name + "ch:"+ch);
					if(cs == 2){
						if(ch == 1){
							zjxt_msg.show(name+" 命令执行成功");
							((zVoltageRegulator)p).property.AddSelfActNum(true);
						}else if(ch == 0){
							zjxt_msg.show(name+" 命令执行失败.");
							((zVoltageRegulator)p).property.AddSelfActNum(false);
						}else if(ch == 2){
							zjxt_msg.show(name+" 等待命令执行结果.");
						}
					}
	    		}
	    		if(p instanceof zSVG) {
	    			float pf = ((zSVG)p).PF;
					//zjxt_msg.show(name + "tap:"+tap);
					int ch = ((zSVG)p).property.CheckTarget(60,pf);
					zjxt_msg.show(name + "ch:"+ch);
					if(cs == 2){
						if(ch == 1){
							zjxt_msg.show(name+" 命令执行成功");
							caculateX((Equipment)p);
							((zSVG)p).property.AddSelfActNum(true);
						}else if(ch == 0){
							zjxt_msg.show(name+" 命令执行失败.");
							((zSVG)p).property.AddSelfActNum(false);
						}else if(ch == 2){
							zjxt_msg.show(name+" 等待命令执行结果.");
						}
					}
	    		}
	    		if(p instanceof zTransformerFormer) {
	    			int tap = ((zTransformerFormer)p).currentStep;
					//zjxt_msg.show(name + "tap:"+tap);
					int ch = ((zTransformerFormer)p).property.CheckTarget(60,tap);
					zjxt_msg.show(name + "ch:"+ch);
					if(cs == 2){
						if(ch == 1){
							zjxt_msg.show(name+" 命令执行成功");
							caculateX((Equipment)p);
							((zTransformerFormer)p).property.AddSelfActNum(true);
						}else if(ch == 0){
							zjxt_msg.show(name+" 命令执行失败.");
							((zTransformerFormer)p).property.AddSelfActNum(false);
						}else if(ch == 2) {
							zjxt_msg.show(name+" 等待命令执行结果.");
						}
					}
	    		}
	    		if(p instanceof zApf) {
	    			float pf = ((zApf)p).PF;
					//zjxt_msg.show(name + "tap:"+tap);
					int ch = ((zApf)p).property.CheckTarget(60,pf);
					zjxt_msg.show(name + "ch:"+ch);
					if(cs == 2){
						if(ch == 1) {
							if(((Equipment) p).U != ((Equipment) p).oldU) {
								zjxt_msg.show(name+" 命令执行成功");
								caculateX((Equipment)p);
								((zApf)p).property.AddSelfActNum(true);
							}
						}else if(ch == 0){
							zjxt_msg.show(name+" 命令执行失败.");
							((zApf)p).property.AddSelfActNum(false);
						}else if(ch == 2){
							zjxt_msg.show(name+" 等待命令执行结果.");
						}
					}
	    		}
	    		if(p instanceof zTpunbalance) {
	    			float pf = ((zTpunbalance)p).PF;
					//zjxt_msg.show(name + "tap:"+tap);
					int ch = ((zTpunbalance)p).property.CheckTarget(60,pf);
					zjxt_msg.show(name + "ch:"+ch);
					if(cs == 2){
						if(ch == 1){
							zjxt_msg.show(name+" 命令执行成功");
							caculateX((Equipment)p);
							((zTpunbalance)p).property.AddSelfActNum(true);
						}else if(ch == 0){
							zjxt_msg.show(name+" 命令执行失败.");
							((zTpunbalance)p).property.AddSelfActNum(false);
						}else if(ch == 2){
							zjxt_msg.show(name+" 等待命令执行结果.");
						}
					}
	    		}
    		}
    		
    		
    	}
		//List<PowerSystemResource> equipments = line.equipments;
		zjxt_msg.show("节点数:" + equipments.size()+"");
        float volRate; //电压合格率
        int qualifiedSize = 0; //合格数量
        int size = equipments.size();
        
        for(int i=0; i<size; i++) {
        	
        	Equipment equi = (Equipment)equipments.get(i);
        	String equiName = equi.getName();
        	zjxt_msg.show(equiName);
        	
        	String eid = equi.getMrID();
	    	//zFeederLine line = null;
	    	zjxt_Property propPer = equi.prop;
	    	int vlid = equi.vlid; //电压等级ID
	    	VoltageLevel voltage = equi.voltage;
	    	//zjxt_msg.show(equi.getName() + " 电压等级:"+voltage.getHighVoltageLimit());
	    	if(equi instanceof zCompensator ||
	    		equi instanceof zVoltageRegulator) {
	    		if(equi.U>voltage.getHighVoltageLimit() ||
		    		equi.U<voltage.getLowVoltageLimit()) {
		    		equi.prop.SetAlarm(equi.getName() + "电压为:"+equi.U+"v,判断为量测不准确,请人工检查!");
		    		return;
		    	}
	    	} else if(equi instanceof zTransformerFormer) {
	    		if(equi.U>250 ||
		    		equi.U<180) {
		    		equi.prop.SetAlarm(equi.getName() + "电压为:"+equi.U+"v,判断为量测不准确,请人工检查!");
		    		return;
		    	}
	    	} else {
	    		if(equi.U*1.73>voltage.getHighVoltageLimit() ||
	    			equi.U*1.73<voltage.getLowVoltageLimit()) {
	    			equi.prop.SetAlarm(equi.getName() + "电压为:"+equi.U+"v,判断为量测不准确,请人工检查!");
		    		return;
	    		}
	    	}
	    	
	    	
	    	
        	//zjxt_msg.show(equi.node.Name);
        	//zjxt_msg.show(eid);
        	LimitValue lv = Limit.getLimitInPeriod(eid, "电压"); //取限值对象
        	
        	//zjxt_msg.show("子节点VLID:" + vlid);
			if(lv == null) {
				equi.prop.SetAlarm(equi.getName()+"没有当前时段电压限值!");
				return;
			}
			equi.limit = lv;
			float u = equi.U;
			zjxt_msg.show(equi.getName() + ":"+ u + "V");
			if(u<=lv.upup && u>=lv.lolo) { //电压
				qualifiedSize++;
			}
        }
        
        volRate = (float) qualifiedSize/size;
        zjxt_msg.show("当前线路电压合格率:"+String.format("%.2f", volRate * 100) + "%");
        if(volRate < 1.0f) { //电压合格率小于100%
        	List<zNode> timinalList = zNode.getTiminalNodes();
        	for(zNode node : timinalList) {
	        	Equipment eq = zjxt_CimBuild.getEquipmentById(node.Id);
				eq.parentId = node.parentId;
				checkU(eq, node);
        		//zjxt_msg.show("等待5s钟继续...");
        		//Thread.sleep(5000);
        	}
        } else { //电压合格率100%
        	List<zNode> timinalList = zNode.getTiminalNodes();
        	for(zNode node : timinalList) {
        		dealReactive(node);
        	}
        }
end


//电压越上限
function void handleLimitUp(zNode node, Equipment eq) {
	if(eq.parentId.equals("-1")) { //当前节点为顶级节点
		zjxt_msg.show(eq.getName() + "为顶级节点");
		if(!canOfforDown(eq)) {
			eq.prop.SetAlarm(eq.getName()+"电压为:"+eq.U+"v,暂无调节手段,母线电压越上限,请人工调节!");
		} else { //当前节点可控
			List<zNode> nodes = eq.getChildzNodes(node.Id);
			if(nodes.size() == 0) {
				zjxt_msg.show(eq.getName() + "没有子节点,动作当前设备");
				double Umin  = eq.U-eq.limit.upup; //最小需降压
				double ΔU = caculateUm(eq, false);
				
				if(eq instanceof zCompensator) {
					zCompensator comp = (zCompensator) eq;
					if(ΔU !=0) { 
						double targetPF = getTargetPF(eq, eq.Qm);
						String info = eq.getName() + "电压:"+eq.U+"v,功率因数为:"+eq.PF+
								",判断为电压越上限,将调节目标功率因数为"+targetPF+
								";预计调节后电压为:"+round(eq.U-ΔU)+"v,"+
								"功率因数为:"+targetPF;
						sendYKYT(eq, targetPF, info);
						return;
					}
					
				} else if(eq instanceof zTransformerFormer || 
					eq instanceof zVoltageRegulator) {
					String info = eq.getName() + "电压:"+eq.U+"v,判断为电压越上限，将调节降档;预计调节后电压为:" + 
						caculateU2(eq, true) +"v";
					sendYKYT(eq, 0, info);
					return;
				} else if(eq instanceof zApf ||
					eq instanceof zSVG ||
					eq instanceof zTpunbalance) {
					double ΔQc = 0;
					if(Umin>ΔU) {
						ΔQc = ΔU/0.22*10.5*10.5/eq.X;	
					} else {
						ΔQc = Umin/0.22*10.5*10.5/eq.X;	
					}
					double pf = getTargetPF(eq, ΔQc);
					String info = eq.getName()+"电压:"+eq.U+"v,功率因数为:"+eq.PF+",判断为电压越上限,将调节目标功率因数为:" + pf + ";预计调节后电压为:" +round(eq.U-(Umin<ΔU?Umin:ΔU))+ "v,功率因数为:"+pf;
					sendYKYT(eq, pf, info);
					return;
				}
				return;
			} else {
				double Umin = eq.U - eq.limit.upup; //当前节点最小需降压
				double childUmin = 0.0f; //所有子节点电压允许下降 除以对应电压等级正常电压的最小值，以方便对不同电压等级的电压进行比较
				Equipment minChild = null;
				boolean isFirst = true;
				for(zNode n : nodes) {
					Equipment e = zjxt_CimBuild.getEquipmentById(n.Id);	
					if(isFirst) {
						if(e instanceof zTransformerFormer) {
							childUmin = (e.U - e.limit.lolo)/220;
						} else if(!(e instanceof zCompensator) && !(e instanceof zVoltageRegulator)) {
							childUmin = (e.U - e.limit.lolo)*1.73/e.vlid;
						}  else {
							childUmin = (e.U - e.limit.lolo)/e.vlid;
						}
						minChild = e;
						isFirst = false;
					} else {
						if(e instanceof zTransformerFormer) {
							childUmin = childUmin<(e.U - e.limit.lolo)/220?childUmin:(e.U - e.limit.lolo)/220;
						} else if(!(e instanceof zCompensator) && !(e instanceof zVoltageRegulator)) {
							childUmin = childUmin<(e.U - e.limit.lolo)*1.73/e.vlid? childUmin : (e.U - e.limit.lolo)*1.73/e.vlid; //取最小值
							minChild = childUmin<(e.U - e.limit.lolo)*1.73/e.vlid? minChild : e;
						} else {
							childUmin = childUmin<(e.U - e.limit.lolo)/e.vlid? childUmin : (e.U - e.limit.lolo); //取最小值
							minChild = childUmin<(e.U - e.limit.lolo)/e.vlid? minChild : e;
						}
						zjxt_msg.show(eq.getName()+"子节点最小："+childUmin);
					}
				}
				
				if(Umin/eq.vlid > childUmin) {
					eq.prop.SetAlarm(eq.getName()+"电压为:"+eq.U+"v,预计调节后"+minChild.getName()+"电压越下限,暂无调节手段,母线电压越上限,请人工调节!");
				} else {
					double ΔU = caculateUm(eq, false);
					if(eq instanceof zCompensator) { //电容器
						zCompensator comp = (zCompensator) eq;
						if(ΔU != 0 && Umin<=ΔU && ΔU/eq.vlid<=childUmin) {
							double targetPF = getTargetPF(eq, eq.Qm);
							String info = eq.getName() + "电压:"+eq.U+"v,功率因数为:"+eq.PF+
										",判断为电压越上限,将调节功率因数为"+targetPF+
										";预计调节后电压为:"+round(eq.U-ΔU)+"v,"+
										"功率因数为:"+targetPF;
							sendYKYT(eq, targetPF, info);
							return;
						}
						comp.prop.SetAlarm(comp.getName()+"电压为:"+comp.U+"v,当前电压越上限,且暂无调节手段,请人工调节!");
						
					} else if(eq instanceof zSVG || eq instanceof zApf || eq instanceof zTpunbalance) {
						double ΔUm = caculateUm(eq, false); //可降压裕度
						
						if(ΔUm/eq.vlid<Umin/minChild.vlid) {
							double targetPF = getTargetPF(eq, eq.Qc); //遥调目标功率因数
							String info = eq.getName() + "电压为:"+eq.U+",功率因数为:"+eq.PF+
								",判断为电压越上限,将调节目标功率因数为"+targetPF+
								";预计调节后电压为:"+(eq.U-ΔUm)+",功率因数为:"+targetPF;
							sendYKYT(eq, targetPF, info);
							return;
						} else if(ΔUm>childUmin) {
							double ΔQc = 10.5*childUmin/eq.X;
							double pf = getTargetPF(minChild, ΔQc);
							String info = eq.getName()+"电压:"+eq.U+"v,功率因数为:"+eq.PF+
								",判断为电压越上限， 将调节"+minChild.getName()+"目标功率因数为" + pf+
								";预计调节后电压为:"+round(eq.U-childUmin)+",功率因数为:"+pf;
							sendYKYT(minChild, pf, info);
							return;
						} else if(Umin<=ΔUm && ΔUm/eq.vlid<=childUmin/minChild.vlid) {
							double targetPF = getTargetPF(eq, eq.Qc); //遥调目标功率因数
							String info = eq.getName() + "电压为："+eq.U+",功率因数为:"+eq.PF+
								",判断为电压越上限,将调节目标功率因数为"+targetPF+
								";预计调节后电压为:"+(eq.U-Umin)+",功率因数为:"+targetPF;
							sendYKYT(eq, targetPF, info);
							return;
						}
					}
				}
			}
		}
		
	} else { //当前节点不是顶级节点，则继续向上查找
		zjxt_msg.show(eq.getName() + "当前节点不是顶级节点，则继续向上查找");
		zjxt_msg.show(eq.parentId);
		Equipment parentEquipment = zjxt_CimBuild.getEquipmentById(eq.parentId);
		zNode parentNode = node.getParentNode();
		handleLimitUp(parentNode, parentEquipment);
	}
	
}

/**
* 电业越下限
*/
function void handleLimitLo(zNode node, Equipment eq) {
	Equipment parent = zjxt_CimBuild.getEquipmentById(eq.parentId); //当前节点父节点
	//zjxt_msg.show("有功:" + eq.toString());
	
	if(eq.U < eq.limit.lolo && parent != null &&
		parent.U<parent.limit.lolo) { 
		zjxt_msg.show(eq.getName() + "电压:"+eq.U+"v,功率因数为:"+eq.PF+",电压越下限,且父节点:" + parent.getName()+"电压越下限");
		handleLimitLo(node.getParentNode(), parent);
	} else if(eq.U < eq.limit.lolo && parent == null) {
		zjxt_msg.show(eq.getName() + "电压为:"+eq.U+"v,功率因数为:"+eq.PF+",判断为电压越下限,父节点不存在");
		if(canOnorUp(eq)) {
			if(eq instanceof zCompensator) { //父节点是电容器
				float Umax = eq.limit.upup-eq.U; 
				double ΔU = caculateUm(eq, true); 
				if(ΔU != 0 && ΔU<=Umax) {
					double targetPF = getTargetPF(eq, eq.Qm);
					String info = eq.getName()+ "电压为:"+eq.U+"v,功率因数为:"+eq.PF+",判断为电压越下限,将调节目标功率因数为"+targetPF+
								";预计调节后电压为:"+round(eq.U+ΔU)+
								"v,功率因数为"+targetPF+";预计节能:"+round(0.06*eq.Qm)+"KW";
					sendYKYT(eq, targetPF, info);
					return;
				}
				eq.prop.SetAlarm(eq.getName()+"电压为:"+eq.U+",判断为电压越下限,暂无有效调节手段,请人工调节!");
			} else if(eq instanceof zVoltageRegulator ||
				eq instanceof zTransformerFormer) { //调压器、调压变
				String info = eq.getName()+"电压为:"+eq.U+
					"v,判断为电压越下限,将执行升档操作;预计调节后电压为:"+
					caculateU2(eq, true)+
					"v,节能量:"+0+"KW";
				sendYKYT(eq, 1, info);
				return;
			} else if(eq instanceof zSVG ||
				eq instanceof zApf ||
				eq instanceof zTpunbalance) { //SVG、APF、三相不平衡
				double ΔUm = caculateUm(eq, true); 
				double minU = eq.limit.lolo-eq.U;
				//zjxt_msg.show("Qm:"+eq.Qm);
				if(ΔUm < minU) {
					double targetPF = getTargetPF(eq, eq.Qm);
					String info = eq.getName() + "电压为:"+eq.U+"v,功率因数为:"+eq.PF+",判断为电压越下限,将调节目标功率因数为:" + targetPF+
						",预计调节后电压为:"+round(eq.U+ΔUm)+
						"v,功率因数为:"+targetPF+";预计节能:"+round((Math.sqrt(1-Math.pow(eq.PF, 2))/eq.PF-Math.sqrt(1-Math.pow(targetPF, 2))/targetPF)*eq.P*0.09)+
						"KW";
					sendYKYT(eq, targetPF, info);
					return;
				} else {
					double targetPF = getTargetPF(eq, minU*10.5/eq.X);
					String info = eq.getName() + "电压:"+eq.U+"v,功率因数为:"+eq.PF+",判断为电压越下限,将调节目标功率因数为:" + targetPF+
						",预计调节后电压:"+(eq.U+minU)+
						"v,功率因数为:"+targetPF+";预计节能:"+round((Math.sqrt(1-Math.pow(eq.PF, 2))/eq.PF-Math.sqrt(1-Math.pow(targetPF, 2))/targetPF)*eq.P*0.09)+
						"KW";
					sendYKYT(eq, targetPF, info);
					return;
				}
		}
	} else {
		eq.prop.SetAlarm(eq.getName() + "电压为:"+eq.U+"v,判断为电压越下限，且无调节手段,请人工干预!");
	}
} else if(eq.U < eq.limit.lolo && parent !=null &&
	parent.U>=parent.limit.lolo) {
	zjxt_msg.show(eq.getName() + "电压:"+eq.U+"v,判断为电压越下限,父节点:" + parent.getName() + "电压正常");
	if(canOnorUp(parent)) {
		//zjxt_msg.show("父节点:" + parent.getName() + "电压可控制提升");
		List<zNode> nodes = parent.getChildzNodes(parent.Id);
		int count = 0;
		for(zNode n :nodes) {
			Equipment e = zjxt_CimBuild.getEquipmentById(n.Id);	
			zjxt_msg.show(e.getName()+e.U);
			if(e.limit.lolo<=e.U && e.U<=e.limit.upup) {
				count++;
			}
		}
		float rate = (float)count/nodes.size();
		
		if(rate<0.4f) { //电压合格率小于40%
			if(parent instanceof zCompensator) { //父节点是电容器
				float Umax = parent.limit.upup-parent.U; 
				double ΔU = caculateUm(parent, true); 
				if(ΔU!=0 && ΔU<=Umax) {
					double targetPF = getTargetPF(parent, parent.Qm);
					String info = eq.getName() + "电压为:"+eq.U + "v,判断为电压越下限,将调节"+parent.getName()+
								"目标功率因数为"+targetPF+";预计调节后"+parent.getName()+"电压:"+round(parent.U+ΔU)+
								"v,功率因数为:"+targetPF+","+eq.getName()+"电压为:";
					double targetU = 0; 
					if(eq instanceof zTransformerFormer) { //调压变特殊处理
						targetU = eq.U + ΔU/parent.vlid*220;
					} else if(!(eq instanceof zCompensator) && !(eq instanceof zVoltageRegulator)) {
						targetU = eq.U + ΔU/parent.vlid*eq.vlid/1.73;
					} else {
						targetU = eq.U + ΔU;
					}
					info = info+round(targetU)+"v;预计节能:" + round(0.06*parent.Qm)+"KW";
					sendYKYT(parent, targetPF, info);
					return;
				}
				
			}
		} else { //合格率大于40%
			if(canOnorUp(eq)) {
				if(eq instanceof zCompensator) { //父节点是电容器
					float Umax = eq.limit.upup-parent.U; 
					double ΔU = caculateUm(eq, true); 
					
					if(ΔU!=0 && ΔU<=Umax) {
						double targetPF = getTargetPF(eq, ΔU*10.5/eq.X);
						String info = eq.getName()+ "电压为:"+eq.U+"v,功率因数为:"+eq.PF+
									",判断为电压越下限,将调节目标功率因数为"+targetPF+";预计调节后电压:"+round(eq.U+ΔU)+
									"v,功率因数为:"+getTargetPF(eq, eq.Qm)+";预计节能:"+round(0.06*eq.Qm)+"KW";
						sendYKYT(eq, targetPF, info);
						return;
					}
				} else if(eq instanceof zVoltageRegulator ||
					eq instanceof zTransformerFormer) { //调压器、调压变
					String info = eq.getName()+"当前电压为:"+eq.U+"v,判断为电压越下限,将执行升档操作;预计调节后电压:"+
						caculateU2(eq, true)+
						"v;预计节能量:"+0+"KW";
					sendYKYT(eq, 1, info);
					return;
				} else if(eq instanceof zSVG ||
					eq instanceof zApf ||
					eq instanceof zTpunbalance) { //SVG、APF、三相不平衡
					double ΔUm = caculateUm(eq, true); 
					double minU = eq.limit.lolo-eq.U;
					
					if(ΔUm < minU) {
						double targetPF = getTargetPF(eq, eq.Qm);
						String info = eq.getName() + "电压为:"+eq.U+"v,功率因数为:"+eq.PF+",判断为电压越下限,将调节目标功率因数为:" + targetPF+
							",预计调节后电压:"+round(eq.U+ΔUm)+
							"v,功率因数为:"+targetPF+";预计节能:"+round((Math.sqrt(1-Math.pow(eq.PF, 2))/eq.PF-Math.sqrt(1-Math.pow(targetPF, 2))/targetPF)*eq.P*0.09)+
							"KW";
						sendYKYT(eq, targetPF, info);
						return;
					} else {
						double targetPF = getTargetPF(eq, minU*10.5/eq.X);
						String info = eq.getName() + "电压为:"+eq.U+"v,功率因数为:"+eq.PF+",判断为电压越下限,将调节目标功率因数为:" + targetPF+
							",预计调节后电压:"+(eq.U+minU)+
							"v,功率因数为:"+targetPF+";预计节能:"+round((Math.sqrt(1-Math.pow(eq.PF, 2))/eq.PF-Math.sqrt(1-Math.pow(targetPF, 2))/targetPF)*eq.P*0.09)+
							"KW";;
						sendYKYT(eq, targetPF, info);
						return;
					}
				}
			}
		}
			
	} else {
		zjxt_msg.show("父节点:" + parent.getName() + "电压不可控制提升");
		if(canOnorUp(eq)) {
			//zjxt_msg.show("本级控制");
			if(eq instanceof zCompensator) { //父节点是电容器
				float Umax = eq.limit.upup-parent.U; 
				double ΔU = caculateUm(eq, true); 
				
				if(ΔU!=0 && ΔU<=Umax) {
					double targetPF = getTargetPF(eq, eq.Qm);
					String info = eq.getName()+ "电压为:"+eq.U+"v,功率因数为:"+eq.PF+
								",判断为电压越下限,将调节目标功率因数为"+targetPF+
								";预计调节后电压:"+round(eq.U+ΔU)+
								"v,功率因数为:"+targetPF+"预计节能:"+round(0.06*eq.Qm)+"KW";
					sendYKYT(eq, targetPF, info);
					return;
				}
				
			} else if(eq instanceof zVoltageRegulator ||
				eq instanceof zTransformerFormer) { //调压器、调压变
				//zjxt_msg.show(eq.getName()+eq.stepvoltageincrement);
				String info = eq.getName()+"当前电压为:"+eq.U+"v,判断为电压越下限,将执行升档操作;预计调节后电压:"+
					caculateU2(eq, true)+
					"v;预计节能量:"+0+"KW";
				sendYKYT(eq, 1, info);
				return;
			} else if(eq instanceof zSVG ||
				eq instanceof zApf ||
				eq instanceof zTpunbalance) { //SVG、APF、三相不平衡
				double ΔUm = caculateUm(eq, true); 
				double minU = eq.limit.lolo-eq.U;
				//zjxt_msg.show("ΔUm"+ΔUm);
				//zjxt_msg.show("minU"+minU);
				if(ΔUm < minU) {
					double targetPF = getTargetPF(eq, eq.Qm);
					String info = eq.getName() + "电压:"+eq.U+"v,功率因数为:"+eq.PF+",判断为电压越下限,将调节目标功率因数为:" + targetPF+
						",预计调节后电压:"+round(eq.U+ΔUm)+
						"v,功率因数为:"+targetPF+";预计节能:"+round((Math.sqrt(1-Math.pow(eq.PF, 2))/eq.PF-Math.sqrt(1-Math.pow(targetPF, 2))/targetPF)*eq.P*0.09)+
						"KW";
					sendYKYT(eq, targetPF, info);
					return;
				} else {
					double targetPF = getTargetPF(eq, minU*10.5/eq.X);
					String info = eq.getName() + "电压为:"+eq.U+"v,功率因数为:"+eq.PF+",判断为电压越下限,将调节目标功率因数为:" + targetPF+
						",预计调节后电压:"+round(eq.U+minU)+
						"v,功率因数为:"+targetPF+";预计节能:"+round((Math.sqrt(1-Math.pow(eq.PF, 2))/eq.PF-Math.sqrt(1-Math.pow(targetPF, 2))/targetPF)*eq.P*0.09)+
						"KW";;
					sendYKYT(eq, targetPF, info);
					return;
				}
			
			}
		} else {
			eq.prop.SetAlarm(eq.getName() + "电压:"+eq.U+"v,判断为电压越下限,且不可控制升压!");
		}
		}
	}
}


/**
* 电容器的遥控(暂不使用遥控)
**/
function void sendCapYK(zCompensator parent, zCompensator cap, double value , String info) {
	int cs = parent.property.CanControl(); //控制状态
	String head = "";
	String kind = "";
	if(cs == 1) { //建议
		head = "建议;";
		kind = zjxt_msg.JianYi;  //'建议'的拼音
	} else if(cs == 2) { //控制
		head = "控制;";
		kind = zjxt_msg.KongZhi;  //zjxt_msg.KongZhi 静态字符串资源，是'控制'的拼音
	}
	String tag = "";
	if(value == 1) {
		tag = "投入";
	} else if(value == 0) {
		tag = "切除";
	}
	
	cap.oldU = cap.U; //记录当前的电压，等动作成功后计算电抗
	cap.property.setyk((int)value, kind, tag, info, head+info);
	cap.property.SetTarget(cap.property.getyxById(cap.SWITCHID),(float)value);
	
}

/**
* 发送遥控遥调
**/
function void sendYKYT(Equipment e, double value, String info) {
	int cs = e.prop.CanControl(); //控制状态
	String head = "";
	String kind = "";
	if(cs == 1) { //建议
		head = "建议;";
		kind = zjxt_msg.JianYi;  //'建议'的拼音
	} else if(cs == 2) { //控制
		head = "控制;";
		kind = zjxt_msg.KongZhi;  //zjxt_msg.KongZhi 静态字符串资源，是'控制'的拼音
	}
	//有载调压变，则发送遥控命令
	if(e instanceof zTransformerFormer || 
		e instanceof zVoltageRegulator) {
		String tag = "";
		int step = e.currentStep;
		if(value == 1) {
			tag = "升档";
			step = step+1;
		} else if(value == 0) {
			tag = "降档";
			step = step-1;
		}
		e.prop.setyk((int)value, kind, tag, info, head+info);	
		e.prop.SetTarget((float)e.currentStep, (float)step);
	}
	//如果该设备是APF、SVG、三相不平衡、调压器，则发送遥调命令
	if(e instanceof zApf || 
		e instanceof zSVG || 
		e instanceof zTpunbalance ||
		e instanceof zCompensator) {
		e.oldU = e.U;
		e.oldP = e.P; 
		e.oldPF = e.PF; //记录当前的电压，有功,功率因数，等动作成功后计算电抗
		e.prop.setyt("目标功率因数", (float)value, kind, zjxt_msg.Cos_ + zjxt_msg.YaoTiao, info, head+info);
		e.prop.SetTarget(e.PF, (float)value);
	}
}

/**
* 计算目标功率因数
**/
function double getTargetPF(Equipment e, double ΔQc) {
	double P = (double) e.P;
	double Q = (double) e.Q;
	double PF = (double) e.PF;
	if(e.limit.upup<e.U) {
		ΔQc = ΔQc*(-1);
	}
	double targetPF = Math.sqrt((Math.pow(P,2)+Math.pow(Q,2)) / (Math.pow(P,2)+Math.pow(Q-ΔQc,2))) * PF;
	
	targetPF = (double) Double.parseDouble(String.format("%.2f", targetPF));
	
	return targetPF;
}

/**
* 是否可切或者可降
**/
function boolean canOfforDown(Equipment e) {
	int cs = e.prop.CanControl();
	boolean canControl = zjxt_CimBuild.canControl && e.prop.CanControl()!=0 && !e.prop.IsLocked() && (e.Qc>0 || e.currentStep>e.lowStep);
	zjxt_msg.show("控制状态:" + canControl);
	return canControl;
}

/**
* 是否可投或者可升
**/
function boolean canOnorUp(Equipment e) {
	return zjxt_CimBuild.canControl && e.prop.CanControl() != 0 && !e.prop.IsLocked() && (e.Qm>0 || e.currentStep<e.highStep);
}

function String round(double value) {
	return String.format("%.2f", value);
}

//无功优化
function void dealReactive(zNode node) {
	Equipment eq = zjxt_CimBuild.getEquipmentById(node.Id);
	eq.parentId = node.parentId;
	//zjxt_msg.show("1:"+zjxt_CimBuild.canControl+"\n2:"+eq.prop.CanControl()+"\n3:"+eq.prop.IsLocked());
	if(!zjxt_CimBuild.canControl || eq.prop.CanControl()==0 || eq.prop.IsLocked()) { //不可控制
		zNode parentNode = eq.getParentNode();
		if(!"-1".equals(parentNode.Id)) {
			dealReactive(parentNode);
		}
		return;
	}
	if("KIND_Q".equals(eq.kind)) { //无功设备
		double ΔU = eq.limit.upup-eq.U;
		double Qq = ΔU*10.5/eq.X;
		double Qt = Qq > eq.Q? eq.Q : Qq;
		if(eq instanceof zCompensator) {
			//double Qm = ((zCompensator) eq).RATEDCAPACITY; //当前电容器容量即为可投入无功裕度
			if(0<Qt && Qt < eq.Qm) {
				zjxt_msg.show(eq.getName() + "节点正常,不动作");
				List<zNode> list = eq.getChildzNodes(eq.parentId);
				for(int i=0; i<list.size(); i++) {
					zNode no = list.get(i);
					if(no.Id.equals(eq.Id)) {
						continue;
					}
					dealReactive(no);
				}
				zNode parentNode = eq.getParentNode();
				
				if(parentNode != null) {
					dealReactive(parentNode);
				}
			} else if(Qt >= eq.Qm && eq.Qm>0) {
				double targetPF = getTargetPF(eq, eq.Qm);
				String info = eq.getName()+"当前电压为:"+eq.U+",功率因数为:"+eq.PF+",无功功率为:"+eq.Q+
							"kVar,可进行无功优化,将调节目标功率因数为"+targetPF+";预计调节后电压为"+round(eq.U+caculateUm(eq, true))+
							"v,无功功率为"+(eq.Q-eq.Qm)+"kVar,功率因数为"+targetPF;
				sendYKYT(eq, targetPF, info);
				return;
			} else if(eq.Q<0 && eq.Qc>0 && eq.Qm>0) { //无功过剩
				double childUmin = 0.0f; //所有子节点电压允许下降 除以对应电压等级正常电压的最小值，以方便对不同电压等级的电压进行比较
				List<zNode> nodes = eq.getChildzNodes(eq.Id);
				Equipment minChild = null;
				boolean isFirst = true;
				for(zNode n : nodes) {
					Equipment e = zjxt_CimBuild.getEquipmentById(n.Id);	
					if(isFirst) {
						if(e instanceof zTransformerFormer) {
							childUmin = (e.U - e.limit.lo)/220;
						} else if(!(e instanceof zCompensator) && !(e instanceof zVoltageRegulator)) {
							childUmin = (e.U - e.limit.lo)*1.73/e.vlid;
						} else {
							childUmin = (e.U - e.limit.lo)/e.vlid;
						}
						minChild = e;
						isFirst = false;
					} else {
						if(e instanceof zTransformerFormer) {
							childUmin = childUmin<(e.U-e.limit.lo)/220?childUmin : e.U-e.limit.lo;
						} else if(!(e instanceof zCompensator) && !(e instanceof zVoltageRegulator)) {
							childUmin = childUmin<(e.U - e.limit.lo)*1.73/e.vlid? childUmin : (e.U - e.limit.lo)*1.73/e.vlid; //取最小值
							minChild = childUmin<(e.U - e.limit.lo)*1.73/e.vlid? minChild : e;
						} else {
							childUmin = childUmin<(e.U - e.limit.lo)/e.vlid? childUmin : (e.U - e.limit.lo); //取最小值
							minChild = childUmin<(e.U - e.limit.lo)/e.vlid? minChild : e;
						}
						
					}
				}
				if((caculateUm(eq, true)/eq.vlid < childUmin)) {
					double targetPF = getTargetPF(eq, eq.Qm);
					String info = eq.getName()+"当前电压为:"+eq.U+",功率因数为:"+eq.PF+",无功功率为:"+eq.Q+
						",可进行无功优化,将调节功率因数为"+targetPF+";预计调节后电压为"+round(eq.U+Qt*eq.X/10.5)+
						"v,无功功率为"+(eq.Q-eq.Qm)+"kVar,功率因数为"+targetPF;
					sendYKYT(eq, targetPF, info);
					return;
				}
			}
		} else if(eq instanceof zTpunbalance ||
			eq instanceof zApf ||
			eq instanceof zSVG) {
			if(0<Qt && Qt < eq.Qm) {
				double pf = getTargetPF(eq, Qt);
				String info = "系统当前电压正常,将进行无功优化,调节"+eq.getName() + "目标功率因数:"+pf;
				sendYKYT(eq, pf, info);
				return;
			} else if(0<eq.Qm && eq.Qm<Qt) {
				double targetPF = getTargetPF(eq, eq.Qm);
					String info = eq.getName() + "当前电压为:"+eq.U+"v,无功功率为:"+eq.Q+"kVar,功率因数为:"+eq.PF+
						";将调节目标功率因数为:"+targetPF+",预期电压为:"+round(eq.U+eq.Qm*eq.X/10.5/10.5*0.22)+"v"+
						",无功功率为:"+(eq.Q-eq.Qm)+"kVar,功率因数为:"+targetPF+
						";预计节能:"+round((Math.sqrt(1-Math.pow(eq.PF, 2))/eq.PF-Math.sqrt(1-Math.pow(targetPF, 2))/targetPF)*eq.P*0.09)+
						"KW";
					sendYKYT(eq, targetPF, info);
					return;
			} else if(eq.Q<0 && eq.Qc>0) {
				if(Math.abs(eq.Q)<eq.Qc) {
					double targetPF = getTargetPF(eq, Math.abs(eq.Q));
				} else if(Math.abs(eq.Q)>=eq.Qc) {
					double targetPF = getTargetPF(eq, eq.Qc);
					String info = eq.getName() + "当前电压为:"+eq.U+"v,无功功率为:"+eq.Q+"kVar,功率因数为:"+eq.PF+
						";判断为无功过剩,将调节目标功率因数为:"+targetPF+",预期电压为:"+round(eq.Qc*eq.X/10.5)+"v"+
						",无功功率为:"+(eq.Q+eq.Qc)+"kVar,功率因数为:"+targetPF;
					sendYKYT(eq, targetPF, info);
					return;
				}
			}
		}
	} else if("KIND_V".equals(eq.kind)) { //电压设备
		if(eq.limit.lo<=eq.U && eq.U<=eq.limit.up) { //当前电压在优化范围内
			zNode parentNode = node.getParentNode();
			if(parentNode != null) {
				dealReactive(parentNode);
			}
			
		} else if(eq.limit.lo>eq.U) { //当前电压低于优化范围
			if(canOnorUp(eq)) { //可升档
				
				String info = eq.getName() +"电压为"+eq.U+"v"+
					",判断为当前电压非最优状态,将进行升档操作;预期调节后电压为"+caculateU2(eq, true)+"v";
				sendYKYT(eq, 1, info);
				return;
			}
		} else if(eq.limit.up<eq.U) { //当前电压高于优化范围
			if(canOfforDown(eq)) { //可升档
				String kw = String.format("%.2f", eq.stepvoltageincrement/(1+(eq.currentStep-5)*eq.stepvoltageincrement)*0.6*1.732*eq.U/1000*eq.I*0.85);
				String info = eq.getName() +"电压为"+eq.U+
					"v,判断为当前电压偏高,将进行降档操作;预期调节后电压为"+caculateU2(eq, false)+"v;预计节能量为:"+kw+"KW";
				sendYKYT(eq, 0, info);
				return;
			}
		}	
	}
}


function void checkU(Equipment e, zNode node) {
	if(e.U > e.limit.upup) { //电压越上限
		zjxt_msg.show(e.getName() + " 电压越上限");
		handleLimitUp(node, e); 
	} else if(e.U < e.limit.lolo) { //电压越下限
		//zjxt_msg.show(eq.getName() + " 电压:"+eq.U+"v,越下限!");
		handleLimitLo(node, e);
	} else { //电压正常,往上搜索
		Equipment parent = zjxt_CimBuild.getEquipmentById(e.parentId); //当前节点父节点
		zNode parentNode = node.getParentNode();
		if(parent != null && parentNode != null) {
			checkU(parent, parentNode);
		}
	}
}

/**
* 根据前后设备动作前后的量测变化计算电抗
**/
function caculateX(Equipment e) {
	if(e instanceof zCompensator) {
		e.X = (float)(Math.abs(e.U-e.oldU)*10.5/(((zCompensator) e).RATEDCAPACITY/2));
	} else if(e instanceof zVoltageRegulator) {
		e.X = (float)(Math.abs(e.U-e.oldU)*10.5/(e.P*(Math.tan(Math.acos(e.oldPF))-Math.tan(Math.acos(e.PF)))));
	} else if(e instanceof zTransformerFormer) {
		e.X = (float)(Math.abs(e.U-e.oldU)/220*10000*10.5/(e.P*(Math.tan(Math.acos(e.oldPF))-Math.tan(Math.acos(e.PF)))));
	} else {
		e.X = (float)(Math.abs(e.U-e.oldU)*1.73/e.vlid*10000*10.5/(e.P*(Math.tan(Math.acos(e.oldPF))-Math.tan(Math.acos(e.PF)))));
	}
	zjxt_CimBuild.writeX(e.getMrID(), e.X); //更新电抗值
	zjxt_msg.show(e.getName() + "oldapf:" + e.oldPF);
	zjxt_msg.show(e.getName() + "oldU:" + e.oldU);
	zjxt_msg.show(e.getName() + "电抗：" + e.X);
}

/**
*	计算ΔUm  isUp:是否升压
**/
function double caculateUm(Equipment e, boolean isUp) {
	double ΔUm = 0;
	if(isUp) { //升压裕度,容量减去当前Qc
		//zjxt_msg.show("升压:"+e.Qm);
		if(e instanceof zCompensator|| e instanceof zVoltageRegulator) {
			ΔUm = e.Qm*e.X/10.5;
		} else {
			ΔUm = e.Qm*e.X/10.5/10.5*0.22;
		}
	} else { //降压裕度，当前Qc
		if(e instanceof zCompensator ||
			e instanceof zVoltageRegulator) {
			ΔUm = e.Qc*e.X/10.5;
		} else {
			ΔUm = e.Qc*e.X/10.5/10.5*0.22;
		}
	}
	
	return ΔUm;
}

/**
* 调压变、调压器每升一档的电压变化
**/
function String caculateU2(Equipment e, boolean isUp) {
	double U2 = 0;
	if(e instanceof zTransformerFormer ||
		e instanceof zVoltageRegulator) {
		if(isUp) {
			U2 = e.U *((1+(e.currentStep-5)*e.stepvoltageincrement)+e.stepvoltageincrement)/(1+(e.currentStep-5)*e.stepvoltageincrement);
		} else {
			U2 = e.U *((1+(e.currentStep-5)*e.stepvoltageincrement)-e.stepvoltageincrement)/(1+(e.currentStep-5)*e.stepvoltageincrement);
		}
		
	}
	return String.format("%.2f", U2);
}